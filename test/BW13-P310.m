z:=-2224;
p:=1749234309176102157657582860550885176950582224007184238236721873530271444092780\
387026731606667;
r:=2143085360734996117913472445644488914854141302995428209978212956147876055499508\
01;
t:=-72424742659885778123097924206425573989051009199;
Fp:=GF(p);
F13<u>:=ExtensionField<Fp,u|u^13+2>;
E:=EllipticCurve([Fp|0,-17]);
E13:=EllipticCurve([F13|0,-17]);
h1:=8162224152267;
h2:=3829449736163031399356110014646477253722949499224952771796808311526882284721622\
6525362977813692040700124543771134399033985394310987087382177047993102558030633\
4118770998203112469254700908857130114479496362519790167986675682039976464992393\
7192261075795207044450734446337600975254534173311469296388258219480949553532981\
3584712597113506252391725991204165885267872301249352188839268343758113438924152\
7012172338101075047568719807680411669875073643468745720987082622769647119644685\
3518974478239955997008167587101106670263648202647771435149397680378857936916475\
6444764371373435794214471623071568027118476511569297479889166678583016683344933\
8508974458721686999528912068342165095442833670236992302066157114412659248677177\
7509353628154364568961757033235826243320590035374411793068434381606088516745870\
3771547355668175073589144273557533492991476545917600348712011388282544095223066\
7335388118061271134463808566549744570756793861197125672593923227809450685046369\
4968224256300346209546584470105129662738139446243928338507535589194507819849529\
767732848457;
ht:=3829449736163031399356110014646477253722949499383506094365244999878744944631488\
5841924059744782195499412246496202892126834880313251192358255522412195642669297\
0240511423846380337897312072580075403095289817801767159255790950664701643359581\
1450107060280275467498131479585276713519543601392042696017449664248080434060476\
1571772598508193370298758659072254910802369414331023095063018966517171333032230\
8463979364367244633637493006243524956524537192759625384444279291547168273136408\
4821014990160968053064512911551341435435645282319726326614921474521035557775569\
3814059189540590120706654655914391966979920148013837095793879606327815785852785\
5397113882240346100723575900087900603064875550501905389111951092140606677624895\
3245505848956629209231134134784261967171264624511851689139746794360515152311437\
5815181095390738250443115094928954932587715182708543517409737356808781154190887\
3371231269480929436813783062843385882641918494533498229295837925123080791870363\
3165198684057231665713130232852135469320678538199926681352194389602389861036461\
075717974121;

/*w is the scalar multiplication[z^13-1] of GLV*/
w:=1749233248214262447516620809521841187877100017707061238854829525973209048875911\
623336506581723;
s:=-z^13;

//*****The function TR19 maps a random point into the trace zero subgroup*****//
TR13:=function(Q)
    T:=Q;
    Q1i := Q[1];
    Q2i := Q[2];
     for i:=1 to 12 do
         Q1i := Frobenius(Q1i, Fp);
         Q2i := Frobenius(Q2i, Fp);
         T:=T+E13![Q1i,Q2i,1];
    end for;
return T;
end function;
//*********************************G1 memebrship testing***************************//
//********************[a0, a1]=[-(z^7+z)*(z^4+z^3-z-1),a0*z-1]*********************//

a0:=-(z^7+z)*(z^4+z^3-z-1);
a1:=a0*z-1;
function TestG1(P)
    R1:=a0*P;R2:=P-z*R1;
    R2:=[w*R2[1],R2[2],1];
    if R1[1] eq R2[1] and R1[2] eq R2[2] then 
        return "PASS";
    else 
        return "REJECT";
    end if;
end function;


//*********************************G2 memebrship testing***************************//
//******Checking that (1+\pi+...\pi^12)(Q)=0 and \pi(Q)=-z*(w*Q[1], Q[2])**********//
function TestG2(Q)
    R0:=E13![Frobenius(Q[1],Fp,1),Frobenius(Q[2],Fp,1),1];
    R1:=R0+E13![Frobenius(Q[1],Fp,2),Frobenius(Q[2],Fp,2),1];
    R2:=E13![Frobenius(R1[1],Fp,2),Frobenius(R1[2],Fp,2),1];
    R3:=R1+R2;
    R4:=E13![Frobenius(R3[1],Fp,4),Frobenius(R3[2],Fp,4),1];
    R5:=E13![Frobenius(R4[1],Fp,4),Frobenius(R4[2],Fp,4),1];
    R:=R3+R4+R5+Q;
    R1:=E13![w*Q[1], Q[2]];
    R1:=-z*R1;
    if R[3] eq 0 and R0[1] eq R1[1] and R0[2] eq R1[2] then 
        return "PASS";
    else 
        return "REJECT";
    end if;
end function;


//*********************GT memebrship testing******************//
//****************the vector C=[z^2,-z,1,0...0,]*************//

function TestGT(a)
    r0:=Frobenius(a,Fp,1);r1:=r0*Frobenius(a,Fp,2);
    r2:=Frobenius(r1,Fp,2);r3:=r1*r2;
    r4:=Frobenius(r3,Fp,4);r5:=Frobenius(r4,Fp,4);
    r0:=a*r3*r4*r5;
    r1:=a^(-z);
    r2:=r1^(-z);
    r1:=r2*Frobenius(r1,Fp,1)*Frobenius(a,Fp,2);
    if r0 eq 1 and r1 eq 1 then 
        return "PASS";
    else 
        return "REJECT";
    end if;
end function;


//********************************functional testing****************************************//
sum:=1;
for i:=1 to 100 do
/*Generating points P1 and P2, where P1 in G1 and P2 not in G1*/
    repeat
        P1:=h1*Random(E);
        P2:=r*Random(E);
    until P1[3] eq 1 and P2[3] eq 1;
    if TestG1(P1) eq "PASS" and TestG1(P2) eq "REJECT" then
        sum:=sum*1;
    else
        sum:=0;
    end if;
end for; 

if sum eq 1 then
    printf"function TestG1 is CORRECT!\n";
else 
    printf"function TestG1 is ERROR!\n";
end if;

//G2:
sum:=1;
for i:=1 to 100 do
    repeat
        Q1:=Random(E13);
        Q1:=TR13(Q1)-13*Q1;
        Q1:=h2*Q1;
        Q2:=r*Random(E13);
    until Q1[3] eq 1 and Q2[3] eq 1;

    if TestG2(Q1) eq "PASS" and TestG2(Q2) eq "REJECT" then
        sum:=sum*1;
    else
        sum:=0;
    end if;
end for; 

if sum eq 1 then
    printf"function TestG2 is CORRECT!\n";
else 
    printf"function TestG2 is ERROR!\n";
end if;

//GT
/*Since the time of expontiation by ht is too long, we give a fixed element a1 in GT*/
a1:=9312180474750109234619502002318034501410829837353054509082547113822136620964037\
    56755451427505*u^12 + 79378989968722514852269969754832561547854200909925936\
    2055255984534009649540670886078970733349*u^11 +
    314499955581515472270097098794775080340237071946922570642761180646415602201\
    191510270148264878*u^10 + 7879830560920036879080597452375091431069463990297\
    19020187405449885574535843107230091457790665*u^9 +
    146378601516578312405690909232552592311397521720181605726949208468916168339\
    1215706203032312320*u^8 + 9628714096264395234437707635955404111481738819768\
    7905822219391029242211446931542675038667370*u^7 +
    124424361116271502739564241586626861841171928744389767739010834410233995206\
    7984092535286628327*u^6 + 5135501281267423057914557841233824458771937060337\
    7151729150794449712616858353336586037552281*u^5 +
    133303594293989340311713945450190260210065992735041339452261052017202451531\
    7918292679837186870*u^4 + 5140703497815132923545704853418568076483979654935\
    38267911878939526972596758274309613839990983*u^3 +
    748772763033618109217653641135701181802134593520716856919268675548134564694\
    646843992327949259*u^2 + 81686223208931042113242854838295404407110278428543\
    7493819553996326588670814649445126621524681*u +
    440479978746290017071585977308294168948706060116096159952227416253634160153\
    357570427004874341;

/*Generating random elemrnts a1 and a2, where a1 in GT and a2 not in GT*/
sum:=1;
for i:=1 to 100 do
    repeat
        a1:=a1^i;
        a2:=Random(F13);
        a2:=a2^r;
    until a1 ne 1 and a2 ne 1;
    if TestGT(a1) eq "PASS" and TestGT(a2) eq "REJECT" then
        sum:=sum*1;
    else
        sum:=0;
    end if;
end for; 

if sum eq 1 then
    printf"function TestGT is CORRECT!\n";
else 
    printf"function TestGT is ERROR!\n";
end if;

//************************************benchmarking results****************************//
//G1:
time_begin:=Cputime();
for i:=1 to 100 do
    R1:=a0*P1;R2:=P1-z*R1;
    R2:=[w*R2[1],R2[2],1];
end for;
T:=Cputime(time_begin);
printf"Timing of the G1 memerbship testing  is %o*10^-2\n",T;

//G2:

time_begin:=Cputime();
for i:=1 to 100 do
    R0:=E13![Frobenius(Q1[1],Fp,1),Frobenius(Q1[2],Fp,1),1];
    R1:=R0+E13![Frobenius(Q1[1],Fp,2),Frobenius(Q1[2],Fp,2),1];
    R2:=E13![Frobenius(R1[1],Fp,2),Frobenius(R1[2],Fp,2),1];
    R3:=R1+R2;
    R4:=E13![Frobenius(R3[1],Fp,4),Frobenius(R3[2],Fp,4),1];
    R5:=E13![Frobenius(R4[1],Fp,4),Frobenius(R4[2],Fp,4),1];
    R:=R3+R4+R5+Q1;
    R1:=E13![w*Q1[1], Q1[2]];
    R1:=-z*R1;
end for;
T:=Cputime(time_begin);
printf"Timing of the G2 memerbship testing  is %o*10^-2\n",T;

time_begin:=Cputime();
for i:=1 to 100 do
    r0:=Frobenius(a1,Fp,1);r1:=r0*Frobenius(a1,Fp,2);
    r2:=Frobenius(r1,Fp,2);r3:=r1*r2;
    r4:=Frobenius(r3,Fp,4);r5:=Frobenius(r4,Fp,4);
    r0:=a1*r3*r4*r5;
    r1:=a1^(-z);
    r2:=r1^(-z);
    r1:=r2*Frobenius(r1,Fp,1)*Frobenius(a1,Fp,2);
end for;
T:=Cputime(time_begin);

printf"Timing of the GT memerbship testing  is %o*10^-2\n",T;



